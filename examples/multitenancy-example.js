/**
 * Exemplo de Sistema Multitenancy com Organiza√ß√µes
 * 
 * Demonstra como gerenciar m√∫ltiplas organiza√ß√µes
 * com dados separados e configura√ß√µes espec√≠ficas
 */

const OrganizationService = require('../src/services/organization-service');
const SyncService = require('../src/services/sync-service');
const DatabaseService = require('../src/services/database-service');

// Simula uma conex√£o de banco de dados (em produ√ß√£o, use MySQL, PostgreSQL, etc.)
class MockDatabase {
  constructor() {
    this.data = {
      organizations: [],
      users: [],
      devices: [],
      sites: [],
      alerts: [],
      sync_log: [],
      device_history: [],
      alert_history: []
    };
  }

  async query(sql, params = []) {
    console.log(`[DB] ${sql}`, params);
    
    // Simula opera√ß√µes b√°sicas do banco
    if (sql.includes('INSERT INTO organizations')) {
      const org = params[0];
      this.data.organizations.push(org);
      return { insertId: this.data.organizations.length };
    }
    
    if (sql.includes('SELECT * FROM organizations')) {
      return this.data.organizations;
    }
    
    if (sql.includes('INSERT INTO devices')) {
      const device = params[0];
      this.data.devices.push(device);
      return { insertId: this.data.devices.length };
    }
    
    if (sql.includes('SELECT * FROM devices WHERE organization_id')) {
      const orgId = params[0];
      return this.data.devices.filter(d => d.organization_id === orgId);
    }
    
    if (sql.includes('INSERT INTO sync_log')) {
      const log = params[0];
      this.data.sync_log.push(log);
      return { insertId: this.data.sync_log.length };
    }
    
    return [];
  }
}

async function exemploMultitenancy() {
  console.log('üè¢ Exemplo de Sistema Multitenancy com Organiza√ß√µes');
  console.log('==================================================\n');

  // Inicializa servi√ßos
  const database = new MockDatabase();
  const organizationService = new OrganizationService(database);
  const syncService = new SyncService(database);
  const dbService = new DatabaseService(database);

  try {
    // 1. Criando Organiza√ß√µes
    console.log('üìã 1. Criando organiza√ß√µes...');
    
    const org1 = await organizationService.createOrganization({
      name: 'Empresa ABC Ltda',
      description: 'Empresa de tecnologia com m√∫ltiplos sites',
      datto_api_url: 'https://abc-api.centrastage.net',
      datto_api_key: 'ABC123KEY',
      datto_api_secret: 'ABC123SECRET',
      datto_platform: 'vidal',
      sync_interval_minutes: 30,
      max_devices: 500,
      max_sites: 50,
      contact_name: 'Jo√£o Silva',
      contact_email: 'joao@empresaabc.com',
      contact_phone: '(11) 99999-9999'
    });

    const org2 = await organizationService.createOrganization({
      name: 'Consultoria XYZ',
      description: 'Consultoria em TI com foco em monitoramento',
      datto_api_url: 'https://xyz-api.centrastage.net',
      datto_api_key: 'XYZ456KEY',
      datto_api_secret: 'XYZ456SECRET',
      datto_platform: 'merlot',
      sync_interval_minutes: 60,
      max_devices: 200,
      max_sites: 20,
      contact_name: 'Maria Santos',
      contact_email: 'maria@consultoriaxyz.com',
      contact_phone: '(21) 88888-8888'
    });

    console.log(`‚úÖ Organiza√ß√µes criadas:`);
    console.log(`  - ${org1.name} (ID: ${org1.id})`);
    console.log(`  - ${org2.name} (ID: ${org2.id})`);
    console.log('');

    // 2. Configurando Sincroniza√ß√£o
    console.log('‚öôÔ∏è 2. Configurando sincroniza√ß√£o...');
    
    // Atualiza configura√ß√µes de sincroniza√ß√£o da Org 1
    await organizationService.updateSyncConfig(org1.id, {
      sync_enabled: true,
      sync_interval_minutes: 30,
      sync_devices: true,
      sync_sites: true,
      sync_alerts: true
    });

    // Atualiza configura√ß√µes de sincroniza√ß√£o da Org 2
    await organizationService.updateSyncConfig(org2.id, {
      sync_enabled: true,
      sync_interval_minutes: 60,
      sync_devices: true,
      sync_sites: false, // Org 2 n√£o sincroniza sites
      sync_alerts: true
    });

    console.log('‚úÖ Configura√ß√µes de sincroniza√ß√£o atualizadas');
    console.log('');

    // 3. Sincronizando Organiza√ß√µes
    console.log('üîÑ 3. Sincronizando organiza√ß√µes...');
    
    // Sincroniza organiza√ß√£o espec√≠fica
    console.log(`üì° Sincronizando organiza√ß√£o: ${org1.name}`);
    const syncResult1 = await syncService.syncOrganization(org1.id);
    console.log('Resultado:', syncResult1);
    console.log('');

    // Sincroniza todas as organiza√ß√µes que precisam
    console.log('üì° Sincronizando todas as organiza√ß√µes...');
    const allSyncResults = await syncService.syncAllOrganizations();
    console.log('Resultados:', allSyncResults);
    console.log('');

    // 4. Consultando Dados por Organiza√ß√£o
    console.log('üíæ 4. Consultando dados por organiza√ß√£o...');
    
    // Estat√≠sticas da Org 1
    const stats1 = await dbService.getGeneralStats(org1.id);
    console.log(`üìä Estat√≠sticas da ${org1.name}:`, {
      dispositivos: {
        total: stats1.total_devices,
        online: stats1.online_devices,
        offline: stats1.offline_devices,
        inativos: stats1.inactive_devices
      },
      sites: {
        total: stats1.total_sites,
        ativos: stats1.active_sites,
        inativos: stats1.inactive_sites
      },
      alertas: {
        total: stats1.total_alerts,
        cr√≠ticos: stats1.critical_alerts,
        avisos: stats1.warning_alerts,
        info: stats1.info_alerts
      }
    });
    console.log('');

    // Estat√≠sticas da Org 2
    const stats2 = await dbService.getGeneralStats(org2.id);
    console.log(`üìä Estat√≠sticas da ${org2.name}:`, {
      dispositivos: {
        total: stats2.total_devices,
        online: stats2.online_devices,
        offline: stats2.offline_devices,
        inativos: stats2.inactive_devices
      },
      sites: {
        total: stats2.total_sites,
        ativos: stats2.active_sites,
        inativos: stats2.inactive_sites
      },
      alertas: {
        total: stats2.total_alerts,
        cr√≠ticos: stats2.critical_alerts,
        avisos: stats2.warning_alerts,
        info: stats2.info_alerts
      }
    });
    console.log('');

    // 5. Consultas Espec√≠ficas por Organiza√ß√£o
    console.log('üîç 5. Consultas espec√≠ficas por organiza√ß√£o...');
    
    // Dispositivos online da Org 1
    const onlineDevices1 = await dbService.getOnlineDevices(org1.id);
    console.log(`üü¢ Dispositivos online da ${org1.name}: ${onlineDevices1.length}`);
    
    // Alertas cr√≠ticos da Org 2
    const criticalAlerts2 = await dbService.getAlertsBySeverity(org2.id, 'critical');
    console.log(`üö® Alertas cr√≠ticos da ${org2.name}: ${criticalAlerts2.length}`);
    console.log('');

    // 6. Verificando Limites
    console.log('üìè 6. Verificando limites das organiza√ß√µes...');
    
    const limits1 = await organizationService.checkLimits(org1.id);
    console.log(`Limites da ${org1.name}:`, limits1);
    
    const limits2 = await organizationService.checkLimits(org2.id);
    console.log(`Limites da ${org2.name}:`, limits2);
    console.log('');

    // 7. Estat√≠sticas Globais (Admin)
    console.log('üåç 7. Estat√≠sticas globais (admin)...');
    
    const globalStats = await dbService.getGlobalStats();
    console.log('Estat√≠sticas globais:', globalStats);
    
    const statsByOrg = await dbService.getStatsByOrganization();
    console.log('Estat√≠sticas por organiza√ß√£o:', statsByOrg);
    console.log('');

    // 8. Pesquisa Global por Organiza√ß√£o
    console.log('üîé 8. Pesquisa global por organiza√ß√£o...');
    
    const search1 = await dbService.globalSearch(org1.id, 'servidor');
    console.log(`Resultados da pesquisa "servidor" na ${org1.name}: ${search1.total} itens`);
    
    const search2 = await dbService.globalSearch(org2.id, 'alerta');
    console.log(`Resultados da pesquisa "alerta" na ${org2.name}: ${search2.total} itens`);
    console.log('');

    // 9. Gerenciamento de Organiza√ß√µes
    console.log('‚öôÔ∏è 9. Gerenciamento de organiza√ß√µes...');
    
    // Lista organiza√ß√µes ativas
    const activeOrgs = await organizationService.getActiveOrganizations();
    console.log(`Organiza√ß√µes ativas: ${activeOrgs.length}`);
    
    // Organiza√ß√µes que precisam de sincroniza√ß√£o
    const orgsForSync = await organizationService.getOrganizationsForSync();
    console.log(`Organiza√ß√µes para sincronizar: ${orgsForSync.length}`);
    console.log('');

    // 10. Simula√ß√£o de Desativa√ß√£o
    console.log('üîÑ 10. Simulando desativa√ß√£o de organiza√ß√£o...');
    console.log('(Em um cen√°rio real, organiza√ß√µes inativas teriam sincroniza√ß√£o desabilitada)');
    console.log('');

    console.log('‚úÖ Exemplo de multitenancy conclu√≠do com sucesso!');
    console.log('');
    console.log('üí° Benef√≠cios do sistema multitenancy:');
    console.log('  - Dados completamente separados por organiza√ß√£o');
    console.log('  - Configura√ß√µes espec√≠ficas por tenant');
    console.log('  - Controle de limites e recursos');
    console.log('  - Sincroniza√ß√£o independente');
    console.log('  - Seguran√ßa e isolamento de dados');
    console.log('  - Escalabilidade para m√∫ltiplos clientes');
    console.log('  - Relat√≥rios e estat√≠sticas por organiza√ß√£o');

  } catch (error) {
    console.error('‚ùå Erro durante o exemplo:', error.message);
  }
}

// Executa o exemplo
if (require.main === module) {
  exemploMultitenancy();
}

module.exports = { exemploMultitenancy };